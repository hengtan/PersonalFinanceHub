name: Test Suite

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: personal_finance_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Setup test environment
      run: |
        cd backend
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "TEST_POSTGRES_HOST=localhost" >> .env.test
        echo "TEST_POSTGRES_PORT=5432" >> .env.test
        echo "TEST_POSTGRES_DB=personal_finance_test" >> .env.test
        echo "TEST_POSTGRES_USER=postgres" >> .env.test
        echo "TEST_POSTGRES_PASSWORD=postgres123" >> .env.test
        echo "TEST_REDIS_HOST=localhost" >> .env.test
        echo "TEST_REDIS_PORT=6379" >> .env.test

    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        for i in {1..30}; do
          if pg_isready -h localhost -p 5432; then
            echo "PostgreSQL is ready"
            break
          fi
          echo "Waiting for PostgreSQL... ($i/30)"
          sleep 2
        done
        
        # Wait for Redis
        for i in {1..30}; do
          if redis-cli -h localhost -p 6379 ping | grep -q PONG; then
            echo "Redis is ready"
            break
          fi
          echo "Waiting for Redis... ($i/30)"
          sleep 2
        done

    - name: Run linting
      run: |
        cd backend
        npm run lint

    - name: Run type checking
      run: |
        cd backend
        npm run typecheck

    - name: Run unit tests
      run: |
        cd backend
        npm run test:unit

    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration

    - name: Run E2E tests
      run: |
        cd backend
        npm run test:e2e

    - name: Generate coverage report
      run: |
        cd backend
        npm run test:coverage

    - name: Upload coverage to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          backend/coverage/
          backend/test-results.xml
        retention-days: 30

    - name: Archive coverage reports
      if: matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: backend/coverage/
        retention-days: 30

  quality-gate:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Quality Gate Check
      run: |
        echo "All tests completed."
        echo "Check individual job results above."
        
        # This job will succeed only if all test jobs succeed
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Quality gate failed - tests did not pass"
          exit 1
        else
          echo "✅ Quality gate passed - all tests successful"
        fi